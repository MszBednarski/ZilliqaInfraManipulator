scilla_version 0
import ListUtils IntUtils
library Test

type Error =
| NotActivated
| StagingAdminNotExist

let make_error =
fun (result: Error) =>
let result_code =
match result with
| NotActivated => Int32 -3
| StagingAdminNotExist => Int32 -4
end
in
{ _exception: "Error"; code: result_code }

let one_msg =
fun (m : Message) =>
let e = Nil {Message} in
Cons {Message} m e

let addfunds_tag = "AddFunds"

contract Test(
    collectorAddr: ByStr20
)

field isActive: Bool = False

procedure ThrowError(err: Error)
    e = make_error err;
    throw e
end

procedure IsActive()
    isActive_tmp <- isActive;
    match isActive_tmp with
    | True  =>
    | False =>
        e = NotActivated;
        ThrowError e
    end
end

transition Activate()
    accept;
    bal <- _balance;
    feeMsg = {_tag: addfunds_tag; _recipient: collectorAddr; _amount: bal};
    msgs = one_msg feeMsg;
    true_val = True;
    isActive := true_val;
    send msgs
end

transition DoNothing()
    IsActive
end
